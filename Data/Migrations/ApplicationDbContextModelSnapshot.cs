// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Assigment2WeatherData.Data;

#nullable disable

namespace Assigment2WeatherData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assigment2WeatherData.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Macedonia",
                            Latitude = 42f,
                            Longitude = 21.43f,
                            Name = "Skopje"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Macedonia",
                            Latitude = 41.03f,
                            Longitude = 21.34f,
                            Name = "Bitola"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Denmark",
                            Latitude = 55.67f,
                            Longitude = 12.58f,
                            Name = "Copenhagen"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Denmark",
                            Latitude = 55.4f,
                            Longitude = 10.38f,
                            Name = "Odense"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Norway",
                            Latitude = 59.92f,
                            Longitude = 10.75f,
                            Name = "Oslo"
                        },
                        new
                        {
                            Id = 6,
                            Country = "Norway",
                            Latitude = 60.39f,
                            Longitude = 5.32f,
                            Name = "Bergen"
                        },
                        new
                        {
                            Id = 7,
                            Country = "United Kingdom",
                            Latitude = 51.52f,
                            Longitude = -0.11f,
                            Name = "London"
                        },
                        new
                        {
                            Id = 8,
                            Country = "United Kingdom",
                            Latitude = 53.48f,
                            Longitude = -2.25f,
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = 9,
                            Country = "Spain",
                            Latitude = 40.4f,
                            Longitude = -3.68f,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 10,
                            Country = "Spain",
                            Latitude = 10.18f,
                            Longitude = -68f,
                            Name = "Valencia"
                        });
                });

            modelBuilder.Entity("Assigment2WeatherData.Models.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Clouds")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<float>("Wind")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("Assigment2WeatherData.Models.WeatherData", b =>
                {
                    b.HasOne("Assigment2WeatherData.Models.City", "City")
                        .WithMany("WeatherDatas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Assigment2WeatherData.Models.City", b =>
                {
                    b.Navigation("WeatherDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
